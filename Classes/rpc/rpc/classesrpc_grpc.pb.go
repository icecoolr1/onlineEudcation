// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClassesRpcClient is the client API for ClassesRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassesRpcClient interface {
	AddClass(ctx context.Context, in *AddClassRequest, opts ...grpc.CallOption) (*Request, error)
	DeleteClass(ctx context.Context, in *AddClassRequest, opts ...grpc.CallOption) (*Request, error)
}

type classesRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewClassesRpcClient(cc grpc.ClientConnInterface) ClassesRpcClient {
	return &classesRpcClient{cc}
}

func (c *classesRpcClient) AddClass(ctx context.Context, in *AddClassRequest, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/rpc.ClassesRpc/AddClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesRpcClient) DeleteClass(ctx context.Context, in *AddClassRequest, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/rpc.ClassesRpc/DeleteClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassesRpcServer is the server API for ClassesRpc service.
// All implementations must embed UnimplementedClassesRpcServer
// for forward compatibility
type ClassesRpcServer interface {
	AddClass(context.Context, *AddClassRequest) (*Request, error)
	DeleteClass(context.Context, *AddClassRequest) (*Request, error)
	mustEmbedUnimplementedClassesRpcServer()
}

// UnimplementedClassesRpcServer must be embedded to have forward compatible implementations.
type UnimplementedClassesRpcServer struct {
}

func (UnimplementedClassesRpcServer) AddClass(context.Context, *AddClassRequest) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClass not implemented")
}
func (UnimplementedClassesRpcServer) DeleteClass(context.Context, *AddClassRequest) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClass not implemented")
}
func (UnimplementedClassesRpcServer) mustEmbedUnimplementedClassesRpcServer() {}

// UnsafeClassesRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassesRpcServer will
// result in compilation errors.
type UnsafeClassesRpcServer interface {
	mustEmbedUnimplementedClassesRpcServer()
}

func RegisterClassesRpcServer(s grpc.ServiceRegistrar, srv ClassesRpcServer) {
	s.RegisterService(&ClassesRpc_ServiceDesc, srv)
}

func _ClassesRpc_AddClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassesRpcServer).AddClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ClassesRpc/AddClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassesRpcServer).AddClass(ctx, req.(*AddClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassesRpc_DeleteClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassesRpcServer).DeleteClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ClassesRpc/DeleteClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassesRpcServer).DeleteClass(ctx, req.(*AddClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassesRpc_ServiceDesc is the grpc.ServiceDesc for ClassesRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassesRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ClassesRpc",
	HandlerType: (*ClassesRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddClass",
			Handler:    _ClassesRpc_AddClass_Handler,
		},
		{
			MethodName: "DeleteClass",
			Handler:    _ClassesRpc_DeleteClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "classesrpc.proto",
}
