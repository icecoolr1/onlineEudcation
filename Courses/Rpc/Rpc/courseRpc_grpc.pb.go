// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CourseRpcClient is the client API for CourseRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseRpcClient interface {
	AddCourse(ctx context.Context, in *CourseAddReq, opts ...grpc.CallOption) (*CourseResp, error)
}

type courseRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseRpcClient(cc grpc.ClientConnInterface) CourseRpcClient {
	return &courseRpcClient{cc}
}

func (c *courseRpcClient) AddCourse(ctx context.Context, in *CourseAddReq, opts ...grpc.CallOption) (*CourseResp, error) {
	out := new(CourseResp)
	err := c.cc.Invoke(ctx, "/Rpc.courseRpc/AddCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseRpcServer is the server API for CourseRpc service.
// All implementations must embed UnimplementedCourseRpcServer
// for forward compatibility
type CourseRpcServer interface {
	AddCourse(context.Context, *CourseAddReq) (*CourseResp, error)
	mustEmbedUnimplementedCourseRpcServer()
}

// UnimplementedCourseRpcServer must be embedded to have forward compatible implementations.
type UnimplementedCourseRpcServer struct {
}

func (UnimplementedCourseRpcServer) AddCourse(context.Context, *CourseAddReq) (*CourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourse not implemented")
}
func (UnimplementedCourseRpcServer) mustEmbedUnimplementedCourseRpcServer() {}

// UnsafeCourseRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseRpcServer will
// result in compilation errors.
type UnsafeCourseRpcServer interface {
	mustEmbedUnimplementedCourseRpcServer()
}

func RegisterCourseRpcServer(s grpc.ServiceRegistrar, srv CourseRpcServer) {
	s.RegisterService(&CourseRpc_ServiceDesc, srv)
}

func _CourseRpc_AddCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRpcServer).AddCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rpc.courseRpc/AddCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRpcServer).AddCourse(ctx, req.(*CourseAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseRpc_ServiceDesc is the grpc.ServiceDesc for CourseRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Rpc.courseRpc",
	HandlerType: (*CourseRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCourse",
			Handler:    _CourseRpc_AddCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "courseRpc.proto",
}
